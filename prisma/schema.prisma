// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Organizer {
  id        Int      @id @default(autoincrement())
  name      String
  manager   String?
  email     String
  password  String
  phone     String?
  address   String?
  about     String?
  url       String?
  sosmed    Json?
  createdAt DateTime @default(now())
  Event     Event[]
}

model Event {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  banner       String?
  artists      String?
  organizerId  Int
  locationName String?
  locationUrl  String?
  ticketSales  Int       @default(0)
  dateStart    DateTime? @default(now()) @db.Date
  dateEnd      DateTime? @default(now()) @db.Date
  timeStart    DateTime? @default(now()) @db.Time
  timeEnd      DateTime? @default(now()) @db.Time
  organizer    Organizer @relation(fields: [organizerId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  Ticket       Ticket[]
}

model Ticket {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  price          Int
  stock          Int
  status         StatusTicket     @default(AVAILABLE)
  eventId        Int
  startSale      DateTime         @default(now()) //@db.DateTime()
  endSale        DateTime?        @default(now()) //@db.DateTime()
  Event          Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  TicketPurchase TicketPurchase[]
}

enum StatusTicket {
  AVAILABLE
  SOLD_OUT
  CLOSED
}

model Purchaser {
  id             Int              @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String
  phone          String?
  nik            String?
  birthdate      DateTime         @db.Date()
  gender         Gender
  TicketPurchase TicketPurchase[]
}

enum Gender {
  MALE
  FEMALE
}

model TicketPurchase {
  id                String            @id @default(uuid())
  purchaserId       Int
  ticketId          Int
  quantity          Int
  totalPrice        Int
  paymentType       String?
  transactionStatus TransactionStatus @default(PENDING)
  Purchaser         Purchaser         @relation(fields: [purchaserId], references: [id], onDelete: Cascade)
  Ticket            Ticket            @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  createdAt         DateTime          @default(now())
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
